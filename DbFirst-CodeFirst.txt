===================================
controller- repository - interface

====================================
DBFirst  Approach : 
Existing DB 
Application : 
Install packages : EFCoreSqlServer, EFCoreTools
Scaffold-DbContext -ConnectionString, DbProvider, -OutputDir Models 
Models - Entity class, Context Class
Controller with views using entity framework
Registering your service in the program.cs  using adddbcontext 
======================================
CodeFirst Approach:
Installing packages 
Model Creation :
- Entity class with necessary annotations
-Context class Inherit from DbContext
 -Include dbset for all models 
-Constructor with db context options 
-Onconfiguring method - give the connection string 
- OnModelCreating : Give your model design and seeding of data (HasKey, HasForeignKey, 
HasData)
-Add migration with file name - verify if everything is correct  
-Update database : Verify table and data creation 
-Interface : Create a generic interface for all entities
-Repository : Create a repository class that derives the interface model/entity wise
-Create the instance for all sort of context references (Data access), Injection in the constructor 
-Controller :  Create instance for the repo
             -inject in the constructor 
             -Call the repo class 
-Views : Create the views accordingly for each method.
-Add the service in program.cs 
ADdDBContext 
AddScoped with repo/interface.




===================================
üåê Controller ‚Äì Repository ‚Äì Interface Flow
===================================
üü¶ DB First Approach
üîπ When to Use
You already have an existing database.
You want to reverse engineer models and context from DB schema.
üîπ Steps

1. Install Packages

Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools

2.Scaffold Models & Context

Scaffold-DbContext "YourConnectionString" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
Creates:
Entity Classes (models mapped to tables)
DbContext Class

3. Generate Controller + Views
Use scaffolding to create controller & CRUD views using EF.

4. Register DbContext in Program.cs

builder.Services.AddDbContext<YourDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));


üü© Code First Approach
üîπ When to Use
You are starting fresh with no DB yet.
You want to design models first, then let EF generate the database.
üîπ Steps

1. Install Packages
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools

2. Model Creation
Entity Classes ‚Üí define with annotations.
DbContext Class ‚Üí inherit from DbContext.
public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Author>().HasKey(a => a.AuthId);

        // Example seed data
        modelBuilder.Entity<Author>().HasData(
            new Author { AuthId = 1, AuthName = "Danny" }
        );
    }
}

3. Configure Connection
In OnConfiguring (optional if using Program.cs DI).

4. Migrations
Add-Migration InitialCreate
Update-Database
Creates DB & tables from models.

5. Repository Pattern
Interface (Generic):
public interface IRepository<T> where T : class
{
    Task<IEnumerable<T>> GetAll();
    Task<T?> GetById(int id);
    Task Add(T entity);
    Task Update(T entity);
    Task Delete(int id);
}

Repository (Per Entity):
public class AuthorRepository : IRepository<Author>
{
    private readonly AppDbContext _context;
    public AuthorRepository(AppDbContext context) => _context = context;

    public async Task<IEnumerable<Author>> GetAll() => await _context.Authors.ToListAsync();
    public async Task<Author?> GetById(int id) => await _context.Authors.FindAsync(id);
    public async Task Add(Author entity) { await _context.Authors.AddAsync(entity); await _context.SaveChangesAsync(); }
    public async Task Update(Author entity) { _context.Authors.Update(entity); await _context.SaveChangesAsync(); }
    public async Task Delete(int id) { var obj = await _context.Authors.FindAsync(id); if (obj != null) { _context.Authors.Remove(obj); await _context.SaveChangesAsync(); } }
}

6. Controller Layer
Inject repository into controller:
public class AuthorsController : Controller
{
    private readonly IRepository<Author> _repo;
    public AuthorsController(IRepository<Author> repo) => _repo = repo;

    public async Task<IActionResult> Index()
    {
        var authors = await _repo.GetAll();
        return View(authors);
    }
}

7. Views Layer
Scaffold/create views for CRUD.

8. Service Registration (Program.cs)
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IRepository<Author>, AuthorRepository>();
builder.Services.AddScoped<IRepository<Book>, BookRepository>();

‚úÖ DB First ‚Üí database drives models
‚úÖ Code First ‚Üí models drive database